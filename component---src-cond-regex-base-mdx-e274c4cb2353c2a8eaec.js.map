{"version":3,"sources":["webpack:///../src/cond/RegexBase.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,wMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,sBAGA,2FAA0E,0BAAYC,WAAW,KAAvB,aAA1E,MACF,0BAAYA,WAAW,KAAvB,cADE,SAC8D,0BAAYA,WAAW,KAAvB,iBAD9D,KAEA,8FAA6E,0BAAYA,WAAW,KAAvB,aAA7E,uBAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sDAIL,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iIAKL,qFAAoE,0BAAYA,WAAW,KAAvB,cAApE,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8DAIL,kFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2D,+LAQTJ,EAAWK,gBAAiB","file":"component---src-cond-regex-base-mdx-e274c4cb2353c2a8eaec.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fb/github/brigand/pattahn/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"regexbase-helper\"\n    }}>{`RegexBase (helper)`}</h1>\n    <p>{`The RegexBase is a helper used internally, but defines the API for `}<inlineCode parentName=\"p\">{`RegexTest`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`RegexMatch`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`RegexMatchAll`}</inlineCode>{`.`}</p>\n    <p>{`Each of these types can be created in a few different ways. We'll use `}<inlineCode parentName=\"p\">{`RegexTest`}</inlineCode>{` for\nthe examples.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import RegexTest from 'pattahn/cond/RegexTest';\n`}</code></pre>\n    <p>{`You can of course pass a RegExp instance.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`expect(RegexTest(/^\\\\d+$/).exec('7')).toEqual(['7']);\nexpect(RegexTest(new RegExp('^\\\\\\\\d+$')).exec('7')).toEqual(['7']);\n`}</code></pre>\n    <p>{`You can alternatively pass a string, which will be passed to `}<inlineCode parentName=\"p\">{`new Regexp`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`expect(RegexTest('^\\\\\\\\d+$').exec('7')).toEqual(['7']);\n`}</code></pre>\n    <p>{`Or finally, use the factory as a tagged template literal.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`expect(RegexTest\\`^\\\\d+$\\`.exec('7')).toEqual(['7']);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}