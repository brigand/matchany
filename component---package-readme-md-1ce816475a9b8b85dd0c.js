(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{SESJ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return b}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),r=n("TjRS");n("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"package/README.md"}});var i={_frontmatter:c},p=r.a;function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(p,o({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"pattahn"},"pattahn"),Object(a.b)("p",null,Object(a.b)("a",o({parentName:"p"},{href:"https://brigand.github.io/pattahn/"}),"API Documentation")),Object(a.b)("h2",{id:"intro"},"Intro"),Object(a.b)("p",null,"This library allows dynamic pattern matching on any values, with convenient syntax for\nprimitives, and powerful composition of condition types when you need the extra power."),Object(a.b)("h2",{id:"install"},"Install"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-sh"}),"npm install --save pattahn\n")),Object(a.b)("p",null,"or"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-sh"}),"yarn add pattahn\n")),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"When you require/import 'pattahn' you get the main \"match\" function. Deep imports are\nused to access other APIs."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"import match from 'pattahn';\nimport Eq from 'pattahn/cond/Eq';\nimport Test from 'pattahn/cond/Test';\n\nconst matcher = match()\n  .with(Eq('foo'), (value) => 'eq foo')\n  .with(\n    Test((v) => v.length === 0),\n    'empty',\n  )\n  .any((other) => 'other: ' + other);\n\nmatcher.exec('foo'); // => 'eq foo'\nmatcher.exec(''); // => 'empty'\nmatcher.exec('bar'); // => 'other: bar'\n")),Object(a.b)("p",null,"See the ",Object(a.b)("a",o({parentName:"p"},{href:"https://brigand.github.io/pattahn/"}),"API Documentation")," for more details."))}b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"package/README.md"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---package-readme-md-1ce816475a9b8b85dd0c.js.map