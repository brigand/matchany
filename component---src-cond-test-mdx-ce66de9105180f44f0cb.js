(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{"00P4":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return l}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),a=n("TjRS");n("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/cond/Test.mdx"}});var i={_frontmatter:c},s=a.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(o.b)(s,r({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"test-condition"},"Test (condition)"),Object(o.b)("p",null,"This takes a predicate function which will tbe applied to the inputs, and if it\nreturns a truthy value, it will yield the input values unmodified."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-js"}),"import match from 'pattahn';\nimport Test from 'pattahn/cond/Test';\n\nconst VALUE = 'foo';\nconst nonEmpty = Test((x) => x.length > 0);\n\nconst result = match()\n  .with(VALUE, 'matches')\n  .exec(VALUE);\n\nexpect(result).toBe('matches');\n")),Object(o.b)("p",null,"You can combine multiple ",Object(o.b)("inlineCode",{parentName:"p"},"Test")," conditions with ",Object(o.b)("inlineCode",{parentName:"p"},"And"),"/",Object(o.b)("inlineCode",{parentName:"p"},"Or"),"."),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-js"}),"const VALUE = 'foo';\nconst nonEmpty = Test((x) => x.length > 0);\nconst startsWithF = Test((x) => x[0] === 'f');\n\nconst result = nonEmpty.and(startsWithF).exec(VALUE);\n\nexpect(result).toEqual([VALUE]);\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/cond/Test.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-cond-test-mdx-ce66de9105180f44f0cb.js.map