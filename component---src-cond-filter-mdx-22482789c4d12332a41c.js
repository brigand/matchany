(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{nOyl:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return s}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var o=n("/FXl"),r=n("TjRS");n("aD51");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/cond/Filter.mdx"}});var i={_frontmatter:c},l=r.a;function s(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(o.b)(l,a({},i,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"filter-condition"},"Filter (condition)"),Object(o.b)("p",null,"Behaves the same as ",Object(o.b)("inlineCode",{parentName:"p"},"And")," but with the argument order swapped. This allows you to add\nfilters on conditions but retain the left value."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"import match from 'matchany';\nimport Filter from 'matchany/cond/Filter';\nimport Prop from 'matchany/cond/Prop';\nimport Id from 'matchany/cond/Id';\n")),Object(o.b)("p",null,"It can be used for a simple match."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"const VALUE = { foo: 1 };\n\nconst result = Filter(Id(), Prop('foo', 1)).exec(VALUE);\n\nexpect(result).toEqual([VALUE]);\n")),Object(o.b)("p",null,"And is also exposed as a method on any ",Object(o.b)("inlineCode",{parentName:"p"},"Condition"),"."),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"const VALUE = { foo: 1 };\n\nconst result = match()\n  .with(Id().filter(Prop('foo', 1)), (x) => 'match: ' + x.foo)\n  .exec(VALUE);\n\nexpect(result).toBe('match: 1');\n")))}s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/cond/Filter.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-cond-filter-mdx-22482789c4d12332a41c.js.map