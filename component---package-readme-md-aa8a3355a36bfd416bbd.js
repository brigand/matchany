(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{SESJ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return p}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),o=n("TjRS");n("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var c={};void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"package/README.md"}});var i={_frontmatter:c},b=o.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(b,r({},i,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"pattahn"},"pattahn"),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"https://brigand.github.io/pattahn/"}),"API Documentation")),Object(a.b)("h2",{id:"intro"},"Intro"),Object(a.b)("p",null,"This library allows dynamic pattern matching on any values, with convenient syntax for\nprimitives, and powerful composition of condition types when you need the extra power."),Object(a.b)("h2",{id:"install"},"Install"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"npm install --save pattahn\n")),Object(a.b)("p",null,"or"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"yarn add pattahn\n")),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"When you require/import 'pattahn' you get the main \"match\" function. Deep imports are\nused to access other APIs."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import match from 'pattahn';\nimport Eq from 'pattahn/cond/Eq';\nimport Test from 'pattahn/cond/Test';\n\nconst matcher = match()\n  .with(Eq('foo').or(Eq('bar')), (value) => 'eq foo/bar')\n  .with(\n    Test((v) => v.length === 0),\n    'empty',\n  )\n  .any((other) => 'other: ' + other);\n\nmatcher.exec('foo'); // => 'eq foo/bar'\nmatcher.exec(''); // => 'empty'\nmatcher.exec('baz'); // => 'other: baz'\n")),Object(a.b)("p",null,"You can also match directly by using an object. Conditions can be used with the ES6\ndynamic key syntax."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import match from 'pattahn';\n\nconst result = match('foo', {\n  foo: 'eq foo',\n  [Eq('bar').or(Eq('baz'))]: 'foo or baz',\n  _: 'default',\n});\n\nresult; // => 'eq foo'\n")),Object(a.b)("p",null,"See the ",Object(a.b)("a",r({parentName:"p"},{href:"https://brigand.github.io/pattahn/"}),"API Documentation")," for more details."))}p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"package/README.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---package-readme-md-aa8a3355a36bfd416bbd.js.map