{"version":3,"sources":["webpack:///../src/cond/Test.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,mMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,oBAGA,4KAEA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,0PAcL,iDAAgC,0BAAYA,WAAW,KAAvB,QAAhC,oBAAqG,0BAAYA,WAAW,KAAvB,OAArG,IAAyJ,0BAAYA,WAAW,KAAvB,MAAzJ,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sN,0LAcTJ,EAAWK,gBAAiB","file":"component---src-cond-test-mdx-b670d22b681d49c85554.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fb/github/brigand/matchany/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"test-condition\"\n    }}>{`Test (condition)`}</h1>\n    <p>{`This takes a predicate function which will tbe applied to the inputs, and if it\nreturns a truthy value, it will yield the input values unmodified.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import match from 'matchany';\nimport Test from 'matchany/cond/Test';\n\nconst VALUE = 'foo';\nconst nonEmpty = Test((x) => x.length > 0);\n\nconst result = match()\n  .with(VALUE, 'matches')\n  .exec(VALUE);\n\nexpect(result).toBe('matches');\n`}</code></pre>\n    <p>{`You can combine multiple `}<inlineCode parentName=\"p\">{`Test`}</inlineCode>{` conditions with `}<inlineCode parentName=\"p\">{`And`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`Or`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const VALUE = 'foo';\nconst nonEmpty = Test((x) => x.length > 0);\nconst startsWithF = Test((x) => x[0] === 'f');\n\nconst result = nonEmpty.and(startsWithF).exec(VALUE);\n\nexpect(result).toEqual([VALUE]);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}