{"version":3,"sources":["webpack:///../src/match_chain.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,yBAGA,sIAEA,iDAAgC,0BAAYC,WAAW,KAAvB,SAAhC,yCAA2H,0BAAYA,WAAW,KAAvB,SAA3H,kFAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4XAmBL,8CAA6B,0BAAYA,WAAW,KAAvB,SAA7B,6CACF,mBAAGA,WAAW,KAAQ,CAChB,KAAQ,4BADd,iBADE,KAIA,kPAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,4BAAW,0BAAYA,WAAW,KAAvB,QAAX,iCAA6F,0BAAYA,WAAW,KAAvB,SAA7F,4EACkC,0BAAYA,WAAW,KAAvB,gBADlC,qBAEF,0BAAYA,WAAW,KAAvB,mCAFE,KAGA,6BAAY,0BAAYA,WAAW,KAAvB,QAAZ,QAAqE,0BAAYA,WAAW,KAAvB,SAArE,iDACA,4BAAW,0BAAYA,WAAW,KAAvB,UAAX,iFACK,0BAAYA,WAAW,KAAvB,sBADL,6C,4LAMJJ,EAAWK,gBAAiB","file":"component---src-match-chain-mdx-da80c20dee89f5eaa00c.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fb/github/brigand/pattahn/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"match-chain-variant\"\n    }}>{`match (chain variant)`}</h1>\n    <p>{`When match is called with 0 or 1 argument it returns a chainable instance for defining\npatterns to match on.`}</p>\n    <p>{`The main two methods are `}<inlineCode parentName=\"p\">{`.with`}</inlineCode>{` to add a branch to the matching, and `}<inlineCode parentName=\"p\">{`.exec`}</inlineCode>{` to run\nthe match operation (which can be called multiple times, if desired).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import match from 'pattahn';\n\nconst r1 = match()\n  .with('foo', 'is foo')\n  .with('bar', 'is bar')\n  .exec('foo');\n\n// The value can alternatively be provided to match() as a single argument,\n// if preferred for style.\nconst r2 = match('foo')\n  .with('foo', 'is foo')\n  .with('bar', 'is bar')\n  .exec();\n\nexpect(r1).toBe('is foo');\nexpect(r2).toBe('is foo');\n`}</code></pre>\n    <p>{`The first argument to `}<inlineCode parentName=\"p\">{`.with`}</inlineCode>{` is a condition, or a value supported by\n`}<a parentName=\"p\" {...{\n        \"href\": \"/pattahn/into-condition\"\n      }}>{`intoCondition`}</a>{`.`}</p>\n    <p>{`The second argument is either a literal value, or a function that takes the output of\nthe condition and returns the value. If the resulting value will be a function, then\nyou need a function that returns a function.`}</p>\n    <h2 {...{\n      \"id\": \"other-methods\"\n    }}>{`Other methods`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`.any`}</inlineCode>{` takes the second argument to `}<inlineCode parentName=\"p\">{`.with`}</inlineCode>{` and matches on any input (i.e. the\ndefault case for a match). The call `}<inlineCode parentName=\"p\">{`.any(result)`}</inlineCode>{` is identical to\n`}<inlineCode parentName=\"p\">{`.with(Test(() => true), result)`}</inlineCode>{`.`}</p>\n    <p>{`Both `}<inlineCode parentName=\"p\">{`.any`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.with`}</inlineCode>{` return the matcher object to allow chaining.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`.clone`}</inlineCode>{` method takes no arguments and returns a shallow clone of the matcher\n(where `}<inlineCode parentName=\"p\">{`.clone().with(...)`}</inlineCode>{` won't add a condition to the original).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}