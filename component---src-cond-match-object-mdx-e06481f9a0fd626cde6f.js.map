{"version":3,"sources":["webpack:///../src/cond/MatchObject.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,0MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,yBADR,2BAGA,4BAAW,0BAAYC,WAAW,KAAvB,eAAX,wFACoB,mBAAGA,WAAW,KAAQ,CACtC,KAAQ,oBADQ,iBADpB,yCAGoE,0BAAYA,WAAW,KAAvB,aAHpE,qDAKA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,myB,iMAsCTJ,EAAWK,gBAAiB","file":"component---src-cond-match-object-mdx-e06481f9a0fd626cde6f.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fb/github/brigand/pattahn/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"matchobject-condition\"\n    }}>{`MatchObject (condition)`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`MatchObject`}</inlineCode>{` condition is more complex than other matchers, but also very\npowerful. It uses the `}<a parentName=\"p\" {...{\n        \"href\": \"/into-condition\"\n      }}>{`IntoCondition`}</a>{` transform for values, so you can mix `}<inlineCode parentName=\"p\">{`Condition`}</inlineCode>{`\ninstances and primitives, or even nest objects.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import match from 'pattahn';\nimport MatchObject from 'pattahn/cond/MatchObject';\n\nconst USER = {\n  type: 'user',\n  data: { name: 'John Doe' },\n};\nconst POST = {\n  type: 'post',\n  data: { title: 'A study of placeholder names' },\n};\n\nconst USER_PATTERN = MatchObject({\n  type: 'user',\n  // This property will be added to the arguments of the pattern branch handler\n  data: MatchObject.Output(),\n});\n\nconst POST_PATTERN = MatchObject({\n  type: 'post',\n  data: MatchObject.Output(),\n});\n\nconst results = [USER, POST].map((value) =>\n  match(value)\n    .with(USER_PATTERN, (obj, user) => \\`user: \\${user.name}\\`)\n    .with(POST_PATTERN, (obj, post) => \\`post: \\${post.title}\\`)\n    .exec(),\n);\n\nexpect(results).toEqual(['user: John Doe', 'post: A study of placeholder names']);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}