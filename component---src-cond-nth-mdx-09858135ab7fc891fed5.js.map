{"version":3,"sources":["webpack:///../src/cond/Nth.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,kMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,mBAGA,uPAE+C,0BAAYC,WAAW,KAAvB,mBAF/C,uDAG8B,0BAAYA,WAAW,KAAvB,WAH9B,KAIA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wEAKL,6FAA4E,0BAAYA,WAAW,KAAvB,MAA5E,wDAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6LAUL,iCAAgB,0BAAYA,WAAW,KAAvB,mBAChB,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2FAML,0CAAyB,0BAAYA,WAAW,KAAvB,OAAzB,gCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yGAQL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,opC,yLAuDTJ,EAAWK,gBAAiB","file":"component---src-cond-nth-mdx-09858135ab7fc891fed5.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fb/github/brigand/pattahn/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"nth-condition\"\n    }}>{`Nth (condition)`}</h1>\n    <p>{`In most cases, we're just looking at one value in conditions, but multiple values can\nflow through the match steps. A condition can receive and/or produce multiple values,\nand they'll either be returned as an array (with `}<inlineCode parentName=\"p\">{`Condition#match`}</inlineCode>{`) or passed to the\nmatch consequent functions with `}<inlineCode parentName=\"p\">{`match()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import match from 'pattahn';\nimport Nth from 'pattahn/cond/Nth';\n`}</code></pre>\n    <p>{`To start, some examples of multiple values being passed through. The `}<inlineCode parentName=\"p\">{`Id`}</inlineCode>{` condition\nwill pass all values through unmodified.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Id from 'pattahn/cond/Id';\n\nconst result = match()\n  .with(Id(), (a, b, c) => ({ a, b, c }))\n  .exec('a', 'b', 'c');\n\nexpect(result).toEqual({ a: 'a', b: 'b', c: 'c' });\n`}</code></pre>\n    <p>{`And with `}<inlineCode parentName=\"p\">{`Condition#exec`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const result = Id().exec('a', 'b', 'c');\n\nexpect(result).toEqual(['a', 'b', 'c']);\n`}</code></pre>\n    <p>{`We could then use `}<inlineCode parentName=\"p\">{`Nth`}</inlineCode>{` to access a specific value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const result = Id()\n  .andThen(Nth(2))\n  .exec('a', 'b', 'c');\n\nexpect(result).toEqual(['b']);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import MatchObject from 'pattahn/cond/MatchObject';\nimport Test from 'pattahn/cond/Test';\n\nconst USER_CONDITION = MatchObject({\n  type: 'user',\n  data: {\n    id: MatchObject.Output(),\n    age: MatchObject.Output(),\n  },\n});\n\nconst makeUser = (id, age) => ({\n  type: 'user',\n  data: {\n    id,\n    age,\n  },\n});\n\n// We get back the matched object as Nth(1) followed by our two Output values\n{\n  const user = makeUser(100100, 42);\n  const match = USER_CONDITION.exec(user);\n  expect(match).toEqual([user, 100100, 42]);\n}\n\nconst INFANT = Test((age) => age <= 2);\nconst SENIOR = Test((age) => age >= 65);\n\nconst Age = (ageCondition) => Nth(3).filter(ageCondition);\n\nconst results = [2, 42, 84].map((age, i) => {\n  const user = makeUser(100200 + i, age);\n\n  const discount = match()\n    .with(USER_CONDITION.filter(Age(INFANT)), '100%')\n    .with(USER_CONDITION.filter(Age(SENIOR)), '50%')\n    .any('0%')\n    .exec(user);\n\n  return \\`A person of age \\${age} gets \\${discount} off\\`;\n});\n\nexpect(results).toEqual([\n  \\`A person of age 2 gets 100% off\\`,\n  \\`A person of age 42 gets 0% off\\`,\n  \\`A person of age 84 gets 50% off\\`,\n]);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}