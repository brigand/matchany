(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{"00P4":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return p}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),o=n("TjRS"),r=n("7JDl");n("aD51");function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/cond/Test.mdx"}});var s={_frontmatter:i},l=o.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(l,c({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(r.a,{mdxType:"CondType"},"Test(predicate: values => boolean)"),Object(a.b)("p",null,"This takes a predicate function which will tbe applied to the inputs, and if it\nreturns a truthy value, it will yield the input values unmodified."),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"import match from 'pattahn';\nimport Test from 'pattahn/cond/Test';\n\nconst VALUE = 'foo';\nconst nonEmpty = Test((x) => x.length > 0);\n\nconst result = match()\n  .with(VALUE, 'matches')\n  .exec(VALUE);\n\nexpect(result).toBe('matches');\n")),Object(a.b)("p",null,"You can combine multiple ",Object(a.b)("inlineCode",{parentName:"p"},"Test")," conditions with ",Object(a.b)("inlineCode",{parentName:"p"},"And"),"/",Object(a.b)("inlineCode",{parentName:"p"},"Or"),"."),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"const VALUE = 'foo';\nconst nonEmpty = Test((x) => x.length > 0);\nconst startsWithF = Test((x) => x[0] === 'f');\n\nconst result = nonEmpty.and(startsWithF).exec(VALUE);\n\nexpect(result).toEqual([VALUE]);\n")))}p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/cond/Test.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-cond-test-mdx-a8584847317a58a5c110.js.map