{"version":3,"sources":["webpack:///../src/condition.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,mMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,aADR,aAGA,4BAAW,0BAAYC,WAAW,KAAvB,aAAX,mFAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uDAIL,yCAAwB,0BAAYA,WAAW,KAAvB,aAAxB,uEACY,0BAAYA,WAAW,KAAvB,QADZ,yDACsH,0BAAYA,WAAW,KAAvB,QADtH,UAEF,0BAAYA,WAAW,KAAvB,SAFE,4DAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iVAoBL,kCAAiB,0BAAYA,WAAW,KAAvB,YAAjB,cAAoF,0BAAYA,WAAW,KAAvB,aAApF,4DACkB,0BAAYA,WAAW,KAAvB,OADlB,qF,0LAOJJ,EAAWK,gBAAiB","file":"component---src-condition-mdx-d6439956bd425e74745a.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fb/github/brigand/pattahn/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"condition\"\n    }}>{`Condition`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Condition`}</inlineCode>{` class represents a boolean match and/or a transformation of the input\nvalues.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Condition, Match } from 'pattahn/core';\n`}</code></pre>\n    <p>{`You can subclass `}<inlineCode parentName=\"p\">{`Condition`}</inlineCode>{` by defining a constructor (which passes the name to\nsuper) and an `}<inlineCode parentName=\"p\">{`impl`}</inlineCode>{` method which takes at least one argument and returns `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` or a\n`}<inlineCode parentName=\"p\">{`Match`}</inlineCode>{`. Here's the simplest Condition: the identity condition.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`class Id extends Condition {\n  constructor() {\n    super('Id');\n  }\n\n  impl(...args) {\n    return new Match(...args);\n  }\n}\n\nmodule.exports = Id.factory;\n\nconst result = Id.factory().exec(7);\nexpect(result).toEqual([7]);\n\n// The class is also exposed as a property of the factory\nexpect(Id.factory.class).toBe(Id);\n`}</code></pre>\n    <p>{`There's a `}<inlineCode parentName=\"p\">{`.factory`}</inlineCode>{` getter on `}<inlineCode parentName=\"p\">{`Condition`}</inlineCode>{` that simply allows the class to be\nconstructed without `}<inlineCode parentName=\"p\">{`new`}</inlineCode>{`. All first-party conditions export the factory to clean up\nthe consuming code.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}