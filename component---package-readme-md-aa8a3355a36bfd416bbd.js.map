{"version":3,"sources":["webpack:///../package/README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,mMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,qBAAG,mBAAGC,WAAW,KAAQ,CACrB,KAAQ,uCADT,sBAGH,iBAAQ,CACN,GAAM,SADR,SAGA,uMAEA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iCAIL,2BACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uBAIL,iBAAQ,CACN,GAAM,SADR,SAGA,4IAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8ZAkBL,iIAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kLAYL,gCAAe,mBAAGA,WAAW,KAAQ,CACjC,KAAQ,uCADG,qBAAf,uB,0LAOJJ,EAAWK,gBAAiB","file":"component---package-readme-md-aa8a3355a36bfd416bbd.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/fb/github/brigand/pattahn/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"pattahn\"\n    }}>{`pattahn`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://brigand.github.io/pattahn/\"\n      }}>{`API Documentation`}</a></p>\n    <h2 {...{\n      \"id\": \"intro\"\n    }}>{`Intro`}</h2>\n    <p>{`This library allows dynamic pattern matching on any values, with convenient syntax for\nprimitives, and powerful composition of condition types when you need the extra power.`}</p>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm install --save pattahn\n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`yarn add pattahn\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`When you require/import 'pattahn' you get the main \"match\" function. Deep imports are\nused to access other APIs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import match from 'pattahn';\nimport Eq from 'pattahn/cond/Eq';\nimport Test from 'pattahn/cond/Test';\n\nconst matcher = match()\n  .with(Eq('foo').or(Eq('bar')), (value) => 'eq foo/bar')\n  .with(\n    Test((v) => v.length === 0),\n    'empty',\n  )\n  .any((other) => 'other: ' + other);\n\nmatcher.exec('foo'); // => 'eq foo/bar'\nmatcher.exec(''); // => 'empty'\nmatcher.exec('baz'); // => 'other: baz'\n`}</code></pre>\n    <p>{`You can also match directly by using an object. Conditions can be used with the ES6\ndynamic key syntax.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import match from 'pattahn';\n\nconst result = match('foo', {\n  foo: 'eq foo',\n  [Eq('bar').or(Eq('baz'))]: 'foo or baz',\n  _: 'default',\n});\n\nresult; // => 'eq foo'\n`}</code></pre>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://brigand.github.io/pattahn/\"\n      }}>{`API Documentation`}</a>{` for more details.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}